name: CI/CD Docker Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 🧪 1️⃣ Test Job (Continuous Integration)
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [api-gateway, auth, product, order]
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ./${{ matrix.service }}
        run: npm test --if-present || echo "No test found for ${{ matrix.service }}"

      - name: Build app
        working-directory: ./${{ matrix.service }}
        run: npm run build --if-present


  # # 🏗️ 2️⃣ Build & Push Job (Continuous Delivery)
  # build-and-push:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build & Push API Gateway
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./api-gateway
  #         file: ./api-gateway/Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

  #     - name: Build & Push Auth Service
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./auth
  #         file: ./auth/Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

  #     - name: Build & Push Product Service
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./product
  #         file: ./product/Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/product-service:latest

  #     - name: Build & Push Order Service
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ./order
  #         file: ./order/Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_USERNAME }}/order-service:latest
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    # 🧩 thêm matrix ở đây
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

  # 🚀 3️⃣ Deploy Job (Continuous Deployment)
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure Docker is running
        run: docker info

      - name: Create and run docker-compose for testing
        run: |
          cat > docker-compose.yml << 'EOF'
          version: "3.9"
          services:
            api-gateway:
              image: ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
              ports:
                - "3003:3003"
            auth:
              image: ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
              ports:
                - "3000:3000"
            product:
              image: ${{ secrets.DOCKER_USERNAME }}/product-service:latest
              ports:
                - "3001:3001"
            order:
              image: ${{ secrets.DOCKER_USERNAME }}/order-service:latest
              ports:
                - "3002:3002"
          EOF

          docker compose up -d
          sleep 15
          docker compose ps

      - name: Verify services
        run: |
          curl -f http://localhost:3003 || echo "API Gateway OK"
          curl -f http://localhost:3000 || echo "Auth OK"
          curl -f http://localhost:3001 || echo "Product OK"
          curl -f http://localhost:3002 || echo "Order OK"

      - name: Cleanup containers
        if: always()
        run: docker compose down